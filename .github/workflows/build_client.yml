name: "publish"

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Ship repo
        uses: actions/checkout@v4

      - name: Checkout Sea repo
        uses: actions/checkout@v4
        with:
          repository: DeepSeaNet/Sea
          path: Sea
          token: ${{ secrets.DEAP_SEA_NET_PAT }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'
          cache-dependency-path: ./pnpm-lock.yaml

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './ -> target'
          
      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '21.x'

      - name: Verify protoc
        run: protoc --version
      
      - name: Configure OpenSSL for MSVC (Windows) — pick VC lib
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $openssl_root = 'C:\Program Files\OpenSSL'
          $lib_root = Join-Path $openssl_root 'lib'
          $vc_root = Join-Path $lib_root 'VC'
          Write-Host "OpenSSL lib root: $lib_root"
          Write-Host "OpenSSL VC root:  $vc_root"

          # Prefer dynamic CRT x64 lib (typical for Rust+MSVC): libcrypto64MD.lib
          $candidates = @(
            Join-Path $vc_root 'libcrypto64MD.lib',
            Join-Path $vc_root 'libcrypto64MDd.lib',
            Join-Path $vc_root 'libcrypto64MT.lib',
            Join-Path $vc_root 'libcrypto64MTd.lib',
            Join-Path $lib_root 'libcrypto.lib',
            Join-Path $lib_root 'libcrypto_static.lib'
          )

          $chosenLib = $candidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $chosenLib) {
            Write-Host "No candidate lib found. Listing lib folder contents:"
            Get-ChildItem -Path $lib_root -Recurse | ForEach-Object { Write-Host $_.FullName }
            throw "Cannot find any libcrypto candidate. Adjust OpenSSL install or path."
          }

          $chosenDir = Split-Path $chosenLib -Parent
          Write-Host "Chosen lib file: $chosenLib"
          Write-Host "Chosen lib dir:  $chosenDir"

          # Export envs for cargo/build scripts
          "OPENSSL_DIR=$openssl_root" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "OPENSSL_LIB_DIR=$chosenDir" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "OPENSSL_INCLUDE_DIR=$(Join-Path $openssl_root 'include')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Add OpenSSL bin to PATH
          "$(Join-Path $openssl_root 'bin')" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Prepend chosenDir to MSVC LIB search path
          $newLib = "$chosenDir;$env:LIB"
          "LIB=$newLib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Debug: try dumpbin to search for EVP symbols
          $dumpbinCandidates = @(
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx64\x64\dumpbin.exe",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.44.35207\bin\Hostx64\x64\dumpbin.exe",
            "dumpbin.exe"
          )
          $dumpbin = $dumpbinCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1

          if ($dumpbin) {
            Write-Host "Using dumpbin: $dumpbin"
            & $dumpbin /SYMBOLS $chosenLib 2>&1 | Select-String -Pattern "EVP_MD_get_size|EVP_CIPHER_get_nid|EVP_MAC_fetch|EVP_MAC_init|EVP_MAC_update|EVP_MAC_final" -Context 0,1 | ForEach-Object { Write-Host $_.ToString() }
          } else {
            Write-Host "dumpbin not found — skipping symbol scan. If unresolved externals persist, run dumpbin locally on the chosen .lib to ensure EVP_* symbols exist."
          }

          Write-Host "OPENSSL_LIB_DIR set to: $chosenDir"

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEA_PATH: Sea
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
