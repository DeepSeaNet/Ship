name: "publish"

on:
  push:
    branches:
      - main

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout Ship repo
        uses: actions/checkout@v4

      - name: Checkout Sea repo
        uses: actions/checkout@v4
        with:
          repository: DeepSeaNet/Sea
          path: Sea
          token: ${{ secrets.DEAP_SEA_NET_PAT }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm'
          cache-dependency-path: ./pnpm-lock.yaml

      - name: Install frontend dependencies
        run: pnpm install

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './ -> target'
          
      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '21.x'

      - name: Verify protoc
        run: protoc --version
      
      - name: Configure OpenSSL for MSVC (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          $openssl_root = 'C:\Program Files\OpenSSL'
          $vc_x64 = Join-Path $openssl_root 'lib\VC\x64'

          Write-Host "Searching for import libs under: $vc_x64"

          # Prefer MD (dynamic CRT) because Rust/MSVC toolchain normally links against dynamic CRT (/MD).
          $preferred = @('MD','MDd','MT','MTd')
          $chosen = $null
          foreach ($p in $preferred) {
            $candidate = Join-Path $vc_x64 $p
            if (Test-Path $candidate) {
              Write-Host "Found candidate: $candidate"
              # check for libcrypto.lib (common name). If present, choose it.
              if (Test-Path (Join-Path $candidate 'libcrypto.lib')) {
                $chosen = $candidate
                break
              } else {
                # If no libcrypto.lib, still allow if any .lib present
                $anylib = Get-ChildItem -Path $candidate -Filter *.lib -ErrorAction SilentlyContinue
                if ($anylib) {
                  Write-Host "Found .lib files in $candidate (first: $($anylib[0].Name))"
                  $chosen = $candidate
                  break
                }
              }
            }
          }

          if (-not $chosen) {
            Write-Host "No lib/VC/x64/{MD,MDd,MT,MTd} found or no .lib files present. Listing lib folder:"
            Get-ChildItem -Path (Join-Path $openssl_root 'lib') -Recurse | ForEach-Object { Write-Host $_.FullName }
            throw "Cannot locate import libs under expected folders. Adjust OPENSSL layout or point to correct folder."
          }

          Write-Host "Chosen folder for OPENSSL_LIB_DIR: $chosen"

          # Export envs for subsequent steps
          "OPENSSL_DIR=$openssl_root" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "OPENSSL_LIB_DIR=$chosen" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "OPENSSL_INCLUDE_DIR=$(Join-Path $openssl_root 'include')" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Add bin to PATH so runtime DLLs are found and tools (like openssl.exe) are available
          "$(Join-Path $openssl_root 'bin')" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Prepend chosen lib folder to MSVC LIB search path
          $newLib = "$chosen;$env:LIB"
          "LIB=$newLib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

          # Debug prints
          Write-Host "ENV vars written: OPENSSL_LIB_DIR and OPENSSL_INCLUDE_DIR and LIB updated."

          # Quick verification: check for libcrypto.lib and inspect symbols with dumpbin (if available)
          $libFile = Join-Path $chosen 'libcrypto.lib'
          if (Test-Path $libFile) {
            Write-Host "Found libcrypto.lib at $libFile"
          } else {
            # try alternative names
            $libalt = Get-ChildItem -Path $chosen -Filter "libcrypto*" -ErrorAction SilentlyContinue
            if ($libalt) {
              Write-Host "Found alternative lib(s): $($libalt | ForEach-Object {$_.Name} -join ', ')"
              $libFile = $libalt[0].FullName
            } else {
              Write-Host "No libcrypto-like files found in chosen folder; list contents:"
              Get-ChildItem -Path $chosen | ForEach-Object { Write-Host $_.Name }
            }
          }

          # Try to locate dumpbin
          $dumpbinCandidates = @(
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.44.35207\bin\Hostx64\x64\dumpbin.exe",
            "${env:ProgramFiles(x86)}\Microsoft Visual Studio\2022\BuildTools\VC\Tools\MSVC\14.44.35207\bin\Hostx64\x64\dumpbin.exe",
            "dumpbin.exe"
          )
          $dumpbin = $dumpbinCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1

          if ($dumpbin -and (Test-Path $libFile)) {
            Write-Host "Using dumpbin: $dumpbin to search for EVP symbols in $libFile"
            & $dumpbin /SYMBOLS $libFile 2>&1 | Select-String -Pattern "EVP_MD_get_size|EVP_CIPHER_get_nid|EVP_MAC_fetch|EVP_MAC_init|EVP_MAC_update|EVP_MAC_final" -Context 0,1 | ForEach-Object { Write-Host $_.ToString() }
          } else {
            if (-not $dumpbin) { Write-Host "dumpbin not found in expected VS paths; skipping symbol scan." }
            if (-not (Test-Path $libFile)) { Write-Host "No lib file to scan for symbols." }
          }

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEA_PATH: Sea
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
